#+TITLE: 12-ui-font-face
#+DESCRIPTION: ???
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp :exports none
;;; 12-ui-font-face.el --- ???Foundational Emacs config -*- lexical-binding: t -*-
#+END_SRC

* Choice of Font for the Emacs Work Area

I purchased a nice font from https://fsd.it/shop/fonts/pragmatapro/ and then
told Emacs to use it by doing the following.

To install the new font into Ubuntu Linux, I downloaded the .zip file and
unpacked it under the directory /usr/share/fonts/truetype/PragmataPro0.829/.
I then rebuild the font cache usng =fc-cache -f -v=.  Note that the =fc-cache=
executable is available using =apt-get install fontconfig=.

I can confirm they are installed correctly by running =fc-list | grep
Pragmata=.  I can view them by using the "Font Manager" program on my Linux
desktop or the "Font Matrix" program which is better.

In my case, the PragmataPro fonts are divided up into:

 - Family: PragmataPro
   - Style: Regular      PragmataPro
   - Style: Italic       PragmataPro Italic
   - Style: Bold         PragmataPro Bold
   - Style: Bold Italic  PragmagaPro Bold Italic
 - Family: PragmataPro Liga
   - Style: Regular      PragmataPro Liga
   - Style: Italic       PragmataPro Liga Italic
   - Style: Bold         PragmataPro Liga Bold
   - Style: Bold Italic  PragmagaPro Liga Bold Italic
 - Family: PragmataPro Mono
   - Style: Regular      PragmataPro Mono
   - Style: Italic       PragmataPro Mono Italic
   - Style: Bold         PragmataPro Mono Bold
   - Style: Bold Italic  PragmagaPro Mono Bold Italic
 - Family: PragmataPro Mono Liga
   - Style: Regular      PragmataPro Mono Liga
   - Style: Italic       PragmataPro Mono Liga Italic
   - Style: Bold         PragmataPro Mono Liga Bold
   - Style: Bold Italic  PragmagaPro Mono Liga Bold Italic

#+BEGIN_SRC emacs-lisp
;; 12-ui-font-face.org

(defun xan/choose-frame-font ()
  "Pick the best installed font from a preferred list."
  (or
   (car (x-list-fonts "PragmataPro Mono Liga-14"))
   (car (x-list-fonts "PragmataPro Mono-14"))
   (car (x-list-fonts "PragmataPro-14"))
   (car (x-list-fonts "monospace-14"))
   (face-attribute 'default :family)))

(let ((font (xan/choose-frame-font)))
  (when font
    (set-frame-font font nil t)
    (message "[font] Using frame font: %s" font)))
#+END_SRC

### #+BEGIN_SRC emacs-lispER
###   (let* ((preferred '("PragmataPro Mono Liga" "PragmataPro Mono" "PragmataPro Liga" "PragmataPro"))
###          (picked (seq-find (lambda (f) (member f (font-family-list))) preferred)))
###     (if picked
###         (progn
###           (message "[font] Found font: %s" picked)
###           (set-frame-font (format "%s-14" picked) nil t)
###           ;; confirm what got applied
###           (run-with-idle-timer
###            0.5 nil
###            (lambda ()
###              (message "[font] Actual frame font: %s"
###                       (frame-parameter nil 'font)))))
###       (message "⚠ No preferred PragmataPro fonts found in font-family-list")))
### #+END_SRC

  (when (member "PragmataPro Mono Liga" (font-family-list))
    (set-frame-font "PragmataPro Mono Liga-14" nil t))

  (set-frame-font
    "PragmataPro Mono Liga 14"    ;; FONT (namestring, object, entity or spec)
    nil                      ;; KEEP-SIZE
    t                        ;; FRAMES (t means to all frames)
  )
;;  (set-frame-font "PragmataPro Liga 14" nil t)




In Emacs Lisp, fonts are represented using three different Lisp object types:

  - font object :: a Lisp object that represents a font that Emacs has
    opened.  Font objects cannot be modified in Lisp, but they can be
    inspected.

  - font spec  :: a font spec creating using font specifications args

  - font entity :: a reference to a font that need not be open.  Its
    properties are intermediate between a font object and a font spec: like a
    font object, and unlike a font spec, it refers to a single, specific font.

or just simply a string:

  - font name :: a string in the *fontconfig* format

To display the complete list of available fonts, execute the following in the
*Scratch Buffer*.

### #+BEGIN_SRC emacs-lispER
###   (dolist (font (x-list-fonts "*"))
###     (insert (format "%s\n" font)))-GOOG-Noto Sans CJK KR-normal-normal-normal-*-*-*-*-*
### #+END_SRC

https://github.com/lumiknit/emacs-pragmatapro-ligatures

### #+BEGIN_SRC emacs-lispER
###   (use-package pragmatapro-lig
###     :quelpa
###       (pragmatapro-lig
###         :fetcher url
###         :url "https://github.com/lumiknit/emacs-pragmatapro-ligatures/raw/master/pragmatapro-lig.el"
###       )
###   )
### #+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (quelpa
  ;;   '(pragmatapro-lig
  ;;      :fetcher url
  ;;      :url "https://github.com/lumiknit/emacs-pragmatapro-ligatures/raw/master/pragmatapro-lig.el"
  ;;    )
  ;; )

  ;;; (add-to-list 'load-path "~/.emacs.d/lisp/emacs-pragmatapro-ligatures/pragmatapro-lig")
  (add-to-list 'load-path "~/.emacs.d/lisp/emacs-pragmatapro-ligatures/")
  ;;; (use-package pragmatapro-lig)
  (require 'pragmatapro-lig)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/lisp/pragmatapro-prettify-symbols-v0.829.el")
#+END_SRC

* Colors

- M-x list-colors-display RET  :: display an annotated rainbox of colors

To see the set of possible color names for X:
    /usr/lib/X11/rgb.txt

(distinguish btw colors for Emacs in X and colors for Emacs in an xterm)

#+BEGIN_SRC emacs-lisp
;;;NEEDED?  (set-background-color "White")
;;;NEEDED?  (set-foreground-color "Black")  ;; don't these duplicate the below?
;;;NEEDED?  (set-cursor-color     "Red")
;;;NEEDED?  (set-mouse-color      "Black")
;;;NEEDED?  (set-border-color     "Blue")
#+END_SRC

* Faces for Emacs Text            =faces vs colors vs themes=

To see the various faces:
    M-x list-faces-display

??? are the following needed to use faces or themes ???

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode
    t)	; Enable colorized text everywhere.

  (setq font-lock-maximum-decoration
    t)	; Enable colorized text everywhere.
#+END_SRC

** Default Face for Specific Kinds of Text
https://www.gnu.org/software/emacs/manual/html_node/emacs/Standard-Faces.html

- default :: This face is used for ordinary text that doesn’t specify any
  face. Its background color is used as the frame’s background color.

M-x customize-face mode-line RET
#+BEGIN_SRC emacs-lisp :results none
  (custom-set-faces
    '(default
      (
        (t
          (:stipple nil
;;           :background "white"
;;           :foreground "black"
           :inverse-video nil
           :box nil
           :strike-through nil
           :overline nil
           :underline nil
           :slant normal
           :weight normal
           :height 130
           :width normal
           :family "PragmataPro"
          )
        )
      )
    )
  )
#+END_SRC

** org-mode face elements

*** Visual Test of Typefaces in Org-Mode

- *Testing*   boldface
- /Testing/   italics
- ~Testing~   verbatim
- -Testing-
- +Testing+   strikethru
- =Testing=   code
 - Testing :: description list

??? (add-to-list 'custom-theme-load-path "<themefolder>")

#+BEGIN_SRC emacs-lisp
  ; Text surrounded by =TEXT=
  ;;; (set-face-attribute 'org-verbatim nil :foreground "LightGrey" :box "Orange" :inverse-video t)

  ; Text surrounded by ~TEXT~
  (set-face-attribute 'org-code nil :foreground "Purple")

  ; Text representing the definition term in a description list   - TERM  :: DEFINITION
  (set-face-attribute 'org-list-dt nil :foreground "Orange" :box "White" :inverse-video t)

  ;font-lock-builtin-face (dark blue on grey)
  ;font-lock-comment-face (red on grey)
  ;font-lock-constant-face (pink on grey)
  ;font-lock-doc-face (black on green)
  ;font-lock-function-name-face (bright blue on grey)
  ;font-lock-keyword-face (bright cyan on grey)
  ;font-lock-string-face (black on green)
  ;font-lock-type-face (FAINT green on grey)
  ;font-lock-variable-name-face (orange on grey HARD TO READ)
  ;font-lock-warning-face red on grey)

  ;(set-face-foreground 'font-lock-builtin-face "White")
  ;(set-face-foreground 'font-lock-comment-face "White")
  ;(set-face-foreground 'font-lock-function-name-face "White")
  ;(set-face-foreground 'font-lock-string-face "White")
  ;(set-face-foreground 'font-lock-variable-name-face "White")

  ;bold (black on grey)
  ;bold-italic (black on grey)
  ;border (black on black UNREADABLE)
  ;cursor (black on black UNREADABLE)
  ;default (black on grey)
  ;fixed-pitch (black on grey)
  ;fringe (black on grey)
  ;header-line (underlined black on grey)
  ;highlight (black-on-green)
  ;isearch (UNREADABLE cyan-on-purple)
  ;isearch-lazy-highlight-face (black-on-cyan)
  ;italic (black-on-grey)
  ;menu  (grey-on-black)
  ;mode-line  (grey-on-black)
  ;mouse
  ;region
  ;scroll-bar
  ;secondary-selection
  ;show-paren-match-face
  ;tool-bar
  ;tooltip
  ;underline
  ;variable-pitch
#+END_SRC

** Themes

A popular way of customizing Emacs colors is the use the #color-theme#
package, of which a number of those these are aware of Org-mode.

For my Gentoo Linux distribution I run, I had to emerge (install):

   $ emerge app-emacs/color-theme

There is also a newer approach called *custom themes* but custom themes do not
replace color themes, as each approach has its advantages.

#+BEGIN_SRC emacs-lisp
  (use-package grandshell-theme)
  (setq custom-enabled-themes '(grandshell))
  (load-theme 'grandshell t)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC DISABLEDemacs-lisp
;;;  (use-package color-theme)
;;  (setq color-theme-is-global t)
;;  (color-theme-initialize)

;;  (load "org-beautify-theme")
;;  (load "color-theme-github")
;;  (load "color-theme-cobalt")  ;; looks normal
;;  (load "color-theme-sanityinc-solarized")  ;; looks normal
;;  (load "color-theme-sanityinc-tomorrow")  ;; looks normal

;;  (load "grandshell-theme")  ;; on black but not bad

;; cyberpunk          ;; on black but not bad
;; grandshell-theme   ;; on black but not bad
;; deeper-blue        ;; on black but not bad
;; leuven             ;; on white but NICE!
;; manoj-dark         ;; on black but VERY CLEAR

#+END_SRC


* SHOULD DISPLAY of BELL GO IN HERE ???  OR IN 10-ui-frame-appearance.org ???


#+BEGIN_SRC emacs-lisp :exports none
  (provide '12-ui-font-face)
  ;;; 12-ui-font-face.el ends here
#+END_SRC

