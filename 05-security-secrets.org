#+TITLE: 05-security-secrets
#+DESCRIPTION: Secrets, encryption, authentication file paths, and GPG integration
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp
;;; config.el --- Tangled master config  -*- lexical-binding: t -*-
#+END_SRC

Here's a solid foundation — only include logic that’s secure and environment-specific, or needed before packages use them.
Isolate sensitive behaviors like GPG, auth sources, secret file locations, and anything tied to credentials.

* Auth Sources

#+BEGIN_SRC emacs-lisp
  (setq auth-sources
        `(,(expand-file-name "authinfo.gpg" xan/data-dir)
          "~/.authinfo.gpg" "~/.authinfo"))
#+END_SRC

* GPG/epa Configuration

This lets you input GPG passphrases in Emacs minibuffer (or silently if agent is set up).

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)

  (setq epg-pinentry-mode 'loopback
        epa-file-cache-passphrase-for-symmetric-encryption t
        epa-file-encrypt-to '("your@email.com") ;; if you use encryption targets
  )
#+END_SRC

* Load Optional Secrets Files

If you have a file with secrets (not committed), then in data/secrets.el, you
can define tokens, passwords, etc. (outside version control).

#+BEGIN_SRC emacss-lisp
  (defconst jlr/secrets-file (expand-file-name "secrets.el" xan/data-dir))
  (when (file-readable-p xan/secrets-file)
    (load jlr/secrets-file))
#+END_SRC

* Optional Vault/GPG agent settings

If you use gpg-agent, you can remind Emacs where the socket is:

#+BEGIN_SRC emacs-lisp
  (setenv "GPG_AGENT_INFO" nil) ;; let gpg-agent manage itself in modern setups
#END_SRC
