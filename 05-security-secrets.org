#+TITLE: 05-security-secrets
#+DESCRIPTION: Secrets, encryption, authentication file paths, and GPG integration
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp :exports none
;;; 05-security-secrets.el --- ??Tangled master config  -*- lexical-binding: t -*-
#+END_SRC

Here's a solid foundation — only include logic that’s secure and environment-specific, or needed before packages use them.
Isolate sensitive behaviors like GPG, auth sources, secret file locations, and anything tied to credentials.


* Auth Sources

#+BEGIN_SRC emacs-lisp
  (setq auth-sources
        `(,(expand-file-name "authinfo.gpg" xan/data-dir)
          "~/.authinfo.gpg" "~/.authinfo"))
#+END_SRC

* GPG/epa Configuration

This lets you input GPG passphrases in Emacs minibuffer (or silently if agent is set up).

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)

  (setq epg-pinentry-mode 'loopback
        epa-file-cache-passphrase-for-symmetric-encryption t
        epa-file-encrypt-to '("your@email.com") ;; if you use encryption targets
  )
#+END_SRC

* Load Optional Secrets Files

If you have a file with secrets (not committed), then in data/secrets.el, you
can define tokens, passwords, etc. (outside version control).

#+BEGIN_SRC emacss-lisp
  (defconst xan/secrets-file (expand-file-name "secrets.el" xan/data-dir))
  (when (file-readable-p xan/secrets-file)
    (load xan/secrets-file))
#+END_SRC

* Optional Vault/GPG agent settings

If you use gpg-agent, you can remind Emacs where the socket is:

#+BEGIN_SRC emacs-lisp
  (setenv "GPG_AGENT_INFO" nil) ;; let gpg-agent manage itself in modern setups
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  (provide '05-security-secrets)
  ;;; 05-security-secrets.el ends here
#+END_SRC

* Disabling Backups of Files Containing Encrypted Content
Article: [[http://anirudhsasikumar.net/blog/2005.01.21.html][Controlling Backups]] of Sensitive Files

With org-crypt, if you have autosave turned on and decrypt the entries within
Emacs, the autosave file will contain the entries in plain text.  For this
reason let's define a minor-mode we'll call "sensitive-mode" which can can
place onto files containing encrypted content.

#+BEGIN_SRC emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
     It disables backup creation and auto saving.

     With no argument, this command toggles the mode.
     Non-null prefix argument turns on the mode.
     Null prefix argument turns off the mode."

    ;; The initial value.
    nil

    ;; The indicator for the mode line.
    " Sensitive"

    ;; The minor mode bindings.
    nil

    (if (symbol-value sensitive-mode)
        (progn

            ;; disable backups
            (set (make-local-variable 'backup-inhibited) t)

            ;; disable auto-save
            (if auto-save-default
                (auto-save-mode -1)))

            ;resort to default value of backup-inhibited
            (kill-local-variable 'backup-inhibited)

            ;resort to default auto save setting
            (if auto-save-default
                (auto-save-mode 1))))
#+END_SRC

Set sensitive mode to turn on by default for files having the =.gpg=
extension.  The following code does exactly that:

#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
    (append
      '(("\\.org\\.gpg$" . org-mode))
      '(("\\.gpg$" . sensitive-mode))
      auto-mode-alist)
  )
#+END_SRC

* TODO Using Encryption to Hide Files/Sections

There is encryption of entire files and there is encryption of sections of
Org-mode outlines.

*** Encrypting *Entire Files* within Emacs

Emacs comes with the [[http://www.gnu.org/software/emacs/manual/html_mono/epa.html][EasyPG]] Assistant, the all-in-one GnuPG interface for
Emacs.  EasyPG also contains the library interface called _EasyPG Library_.

EasyPG Assistant provides the following features.

- Key management
- Cryptographic operations on regions
- Cryptographic operations on files
- Dired integration
- Mail-mode integration
- Automatic encryption/decryption of *.gpg files

By default, every file whose extension is ‘.gpg’ will be treated as encrypted.
That is, when you attempt to open such a file which already exists, the
decrypted text is inserted in the buffer rather than encrypted one.  On the
other hand, when you attempt to save the buffer to a file whose extension is
‘.gpg’, encrypted data is written.

https://www.gnu.org/software/emacs/manual/html_mono/epa.html

#+BEGIN_SRC emacs-lisp
  (defadvice epg--start (around advice-epg-disable-agent activate)
    "Make epg--start not able to find a gpg-agent"
    (let ((agent (getenv "GPG_AGENT_INFO")))
      (setenv "GPG_AGENT_INFO" nil)
      ad-do-it
      (setenv "GPG_AGENT_INFO" agent)))

  (defun epg-disable-agent ()
    "Make EasyPG bypass any gpg-agent"
    (interactive)
    (ad-enable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent bypassed"))

  (defun epg-enable-agent ()
    "Make EasyPG use a gpg-agent after having been disabled with
    epg-disable-agent"
    (interactive)
    (ad-disable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent re-enabled"))
#+END_SRC

To set up Emacs for transparent encryption and decryption our need the add the
following to your .emacs.

#+BEGIN_SRC emacs-lisp
;;NOT NEEDED?  (epa-file-enable)

  ;; If non-nil, always asks user to select recipients.
  ;;  (setq epa-file-select-keys
  ;;      nil)

  ;; *Recipient(s) used for encrypting files.
  ;;  (setq epa-file-encrypt-to
  ;;      ("jeff@taupro.com"))

  ;;  )
#+END_SRC

If you want to temporarily disable this behavior, use =M-x epa-file-disable=,
and then to enable this behavior use =M-x epa-file-enable=.

At file-save time you are prompted to select recipients but this prompt can be
suppressed by putting the following line on the first line of the text being
encrypted.

#+BEGIN_SRC example
  ;; -*- epa-file-encrypt-to: ("ueno@unixuser.org") -*-
#+END_SRC

Some useful functions are:

- M-x epa-list-keys         :: browse your pub keyring, e.g. 'gpg --list-keys'
- M-x epa-list-secret-keys  :: browse your pvt keyring, e.g. 'gpg --list-secret-keys'
- M-x epa-sign-region       :: create a cleartext signature of the region
- M-x epa-encrypt-file     :: encrypt a file

In the '*Keys*' buffer, several commands are available:

- m	:: select (mark) keys
- o	:: output marked key(s) to prompted filename

*** Encrypting *Specific Entries* in an org-mode Outline Hierarchy with org-crypt.

Tagging Subtrees for Encryption

If you just want to encrypt the text of an entry, but not the headline, or
properties you can use ~org-crypt~.  In order to use ~org-crypt~ you need to
add something like the following to your Emacs startup.  In my case, I added
it to my ~init.el~ file like this:

The package ~org-crypt~ is bundled with the ~org~ package so the following
will activate and configure it.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :config
      (require 'org-crypt)

      (org-crypt-use-before-save-magic)

      ;; Prevent having encrypted text inside encrypted text, by turning off tag inheritance.
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))

      ;; GPG key to use for encryption
      ;; Either the Key ID or set to nil to use symmetric encryption.
      (setq org-crypt-key "jrush@taupro.com")
  )
#+END_SRC

Now any text below a headline that has a :crypt: tag will be automatically be
encrypted when the file is saved.  If you want to use a different tag just
customize the =org-crypt-tag-matcher= variable.

To decrypt the text just call =M-x org-decrypt-entry= and the encrypted text
where the point is will be replaced with the plain text.  If you use this
feature a lot, you will probably want to bind =M-x org-decrypt-entry= to a
key.

Entries with a =:crypt:= tag will be automatically be encrypted when you save
the file.

If you have autosave turned on and decrypt the files encrypted entries, the
autosave file will contain the entries in plain text.  For this reason your
should disable autosave for encrypted files.

Note that if you encrypt the whole file, its content won't appear in the
agenda view.  But, encrypting a header section won't exclude itself from
agenda view as long as you put time settings on the header not in its content
because its content is encrypted.
