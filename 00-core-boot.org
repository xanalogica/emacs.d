#+TITLE: 00-core-boot
#+DESCRIPTION: Core config for startup, secrets, runtime defaults
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp :exports none
;;; 00-core-boot.el --- Foundational Emacs config -*- lexical-binding: t -*-
#+END_SRC

#+CAPTION: Verify what org-mode I'm running
#+BEGIN_SRC emacs-lisp
(defun xan/check-org-version-min (min-version)
  "Check Org version is >= MIN-VERSION."
  (let* ((org-path (find-library-name "org"))
         (actual-version (org-version))) ;; ← no second arg
    (message "[org-check] Org version: %s" actual-version)
    (message "[org-check] Org library path: %s" org-path)
    (cond
     ((version< actual-version min-version)
      (warn "[org-check] ⛔ Org version too old! Require ≥ %s, but got %s"
            min-version actual-version))
     ((string-match-p "/straight/repos/org-mode/" org-path)
      (message "[org-check] ✅ Org is installed via straight.el (Git version)."))
     ((string-match-p "/emacs/[0-9.]+/lisp/org/" org-path)
      (message "[org-check] ✅ Org is the built-in Emacs version."))
     (t
      (warn "[org-check] ⚠ Org source is non-standard: %s" org-path)))))

  ;; Automatically run this check after Org is loaded
  (with-eval-after-load 'org
    (xan/check-org-version-min "9.7.11"))
#+END_SRC

#+CAPTION: Report Improperly Terminated Variable Blocks
#+BEGIN_SRC emacs-lisp
(defun xan/check-org-local-variable-blocks (&optional dir)
  "Check for org files in DIR (default: user-emacs-directory) with invalid Local Variables blocks."
  (let* ((root (or dir user-emacs-directory))
         (org-files (directory-files-recursively root "\\.org$"))
         (bad-files '()))
    (dolist (file org-files)
      (with-temp-buffer
        (insert-file-contents file)
        (goto-char (point-min))
        (when (re-search-forward "^[#;]+[ \t]*Local Variables:" nil t)
          (unless (re-search-forward "^[#;]+[ \t]*End:" nil t)
            (push file bad-files)))))
    (when bad-files
      (message "⚠ Org files with malformed Local Variables block:")
      (dolist (f (reverse bad-files))
        (message " - %s" f)))
    bad-files))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (xan/check-org-local-variable-blocks "~/.emacs.d/")))
#+END_SRC

* Directory Setup for a More Organized ~/.emacs.d/ Directory

#+BEGIN_SRC emacs-lisp
  (defconst xan/cache-dir (expand-file-name "cache/" user-emacs-directory))
  (defconst xan/data-dir  (expand-file-name "data/"  user-emacs-directory))

  ;; Create them if they don't exist
  (make-directory xan/cache-dir t)
  (make-directory xan/data-dir t)
#+END_SRC

* Redirect Individual Features

#+CAPTION: places.el (cursor locations)
#+BEGIN_SRC emacs-lisp
  (setq save-place-file (expand-file-name "places" xan/data-dir))
  (save-place-mode 1)
#+END_SRC

#+CAPTION: bookmark.el
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file (expand-file-name "bookmarks" xan/data-dir))
#+END_SRC

#+CAPTION: recentf
#+BEGIN_SRC emacs-lisp
  (setq recentf-save-file (expand-file-name "recentf" xan/data-dir))
#+END_SRC

#+CAPTION: tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-persistency-file-name (expand-file-name "tramp" xan/data-dir))
#+END_SRC

#+CAPTION: nov.el (ePub reader)
#+BEGIN_SRC emacs-lisp
(setq nov-save-place-file (expand-file-name "nov-places" xan/data-dir))
#+END_SRC

#+CAPTION: transient (magic, etc.)
#+BEGIN_SRC emacs-lisp
(setq transient-history-file     (expand-file-name "transient/history.el" xan/data-dir)
      transient-levels-file      (expand-file-name "transient/levels.el" xan/data-dir)
      transient-values-file      (expand-file-name "transient/values.el" xan/data-dir))
#+END_SRC

#+CAPTION: eshell history and data
#+BEGIN_SRC emacs-lisp
  (setq eshell-directory-name (expand-file-name "eshell/" xan/cache-dir))
#+END_SRC

#+CAPTION: eln-cache
#+BEGIN_SRC emacs-lisp
  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache (expand-file-name "eln-cache/" xan/cache-dir)))
#+END_SRC

#+CAPTION: auto-save and backup files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups/" xan/cache-dir)))
        auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save/" xan/cache-dir) t)))
#+END_SRC

#+CAPTION: org-babel library
#+BEGIN_SRC emacs-lisp
  (setq org-babel-library-of-babel-file (expand-file-name "org-babel-library.org" xan/data-dir))
#+END_SRC


#+CAPTION: Auto-save list
#+BEGIN_SRC emacs-lisp
  (setq auto-save-list-file-prefix (expand-file-name "auto-save-list/#" xan/cache-dir))
#+END_SRC

#+CAPTION: Org clock persistence
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist-file (expand-file-name "org-clock-save.el" xan/data-dir))
#+END_SRC

#+CAPTION: Custom settings file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom-settings.el" xan/data-dir))
  (when (file-exists-p custom-file)
    (load custom-file 'noerror))
#+END_SRC

#+CAPTION: Request.el
#+BEGIN_SRC emacs-lisp
  (setq request-storage-directory (expand-file-name "request/" xan/cache-dir))
#+END_SRC

#+CAPTION: yasnippet
#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs `(,(expand-file-name "snippets/" xan/data-dir)))
#+END_SRC

#+CAPTION: cookies/history
#+BEGIN_SRC emacs-lisp
  (setq url-cookie-file (expand-file-name "url/cookies" xan/data-dir)
        url-history-file (expand-file-name "url/history" xan/data-dir))
#+END_SRC

#+CAPTION: Persistent undo
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-history-directory-alist
        `(("." . ,(expand-file-name "undo/" xan/cache-dir))))
  (setq undo-tree-auto-save-history t)
#+END_SRC

#+CAPTION: chatgpt/ and chatgpt-shell.el (from gpt.el or chatgpt-shell)
#+BEGIN_SRC emacs-lisp
  ;; GPT-related package paths
  (setq chatgpt-shell-history-directory (expand-file-name "chatgpt/" xan/data-dir)
        chatgpt-shell-configuration-file (expand-file-name "chatgpt-shell.el" xan/data-dir))

  (make-directory chatgpt-shell-history-directory t)
#+END_SRC

#+CAPTION: .org-id-locations and .org-generic-id-locations
#+BEGIN_SRC emacs-lisp
  (setq org-id-locations-file (expand-file-name "org-id-locations" xan/data-dir))

  ;; Optional: if using org-generic-id (less common)
  (setq org-generic-id-locations-file (expand-file-name "org-generic-id-locations" xan/data-dir))
#+END_SRC

* Foundational behaviors that affect how Emacs runs and loads, before you load modes or packages.
** gcmh – Garbage collection tuning

#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :ensure t
    :diminish
    :init (setq gc-cons-threshold (* 800 1024))
    :hook (emacs-startup . gcmh-mode))
#+END_SRC

** benchmark-init – Measures startup time

[[https://github.com/dholm/benchmark-init-el][benchmark-init]] is a simple package that may or may not carry its weight versus
~usepackage-compute-statistics~. Run ~benchmark-init/show-durations-tabulated~ to
check this one out.

#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
  :ensure t
  :demand t
  :hook (after-init . benchmark-init/deactivate)
  :config
  (benchmark-init/activate))
#+END_SRC

** gnutls – TLS security for downloading packages or HTTPS communication

For the love of all that is holy, do not continue with untrusted connections!

#+BEGIN_SRC emacs-lisp
(use-package gnutls
  :defer t
  :custom
  (gnutls-verify-error t))
#+END_SRC


** diminish – Minor mode modeline cleanup
 Add the ~diminish~ Plugin to ~use-package~ to Hide Selected Minor Modes

Loading github:[[https://github.com/myrjola/diminish.el][diminish]] Elisp package causes ~use-package~ to enable a
configuration keyword =:diminish <SYMBOL>= in your ~use-package~ invocation.
This keyword empowers you to remove or change minor mode strings in your
mode-line.  Such diminished modes are minor modes with no modeline display,
because we don't want to be reminded of it.


#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :straight t
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package diminish)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (diminish 'auto-fill-function)
#+END_SRC

** mouse-wheel-scroll-amount and mwheel – Mouse behavior tweaks, global defaults

ERROR: package mwheel is built-in and should not be loaded via use-package.


#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount
    '(
       2                  ;; #lines to normally scroll by
       ((shift) . 1)      ;; #lines when shift key pressed
       ((control) . nil)  ;; full-screen when control key pressed
     )
  )
  (setq mouse-wheel-progressive-speed
    nil) ;; t adjusts faster, nil keeps it the same
#+END_SRC


#+BEGIN_SRC emacs-lisp :results none
  (use-package mwheel
   :straight nil  ; Ensure we use the built-in version and not download it
   :custom
     (mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (mouse-wheel-progressive-speed nil)
     (mouse-wheel-follow-mouse 't)
   :config
     (setq scroll-step 1)
     (setq scroll-conservatively 1000)
  )
#+END_SRC

https://github.com/io12/good-scroll.el

hook <wheel-up> <wheel-down> to the correct good-scroll-up

#+BEGIN_SRC emacs-lisp :results none
  (global-set-key [next]   #'good-scroll-up-full-screen)
  (global-set-key [prior]  #'good-scroll-down-full-screen)
#+END_SRC


* Additional Small Configuration File
** Place for Small Automatic Configuration Settings

Emacs likes to write small tidbits of manual configuration into an .el file so
I use a small file that I never look into, to keep it separate from my
=config.org=.  It also contains my private information like passwords.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom-settings.el" xan/data-dir))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC




