#+TITLE: 12-ui-font-face
#+DESCRIPTION: ???
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp :exports none
;;; 12-ui-font-face.el --- ???Foundational Emacs config -*- lexical-binding: t -*-
#+END_SRC

* Choice of Font for the Emacs Work Area
https://fsd.it

** Install PragmataPro Font onto Ubuntu Linux

PragmataPro™ is a condensed monospaced font optimized for screen, designed by
Fabrizio Schiavi to be the ideal font for coding, math and engineering

PragmataPro™ has no interline spacing, so the lines are more compact in height
not just in width. You can view a lot of windows at the same time!

Designed for the best possible view at low sizes.

More than 9000 characters optimized from 9pt to 48pt to guarantee the best
possible readability

Designed for every programming language and context.

I purchased a nice font from https://fsd.it/shop/fonts/pragmatapro/ and then
told Emacs to use it by doing the following.

To install the new font into Ubuntu Linux, I downloaded the .zip file and
unpacked it under the directory /usr/share/fonts/truetype/PragmataPro0.829/.
I then rebuild the font cache usng =fc-cache -f -v=.  Note that the =fc-cache=
executable is available using =apt-get install fontconfig=.

I can confirm they are installed correctly by running =fc-list | grep
Pragmata=.  I can view them by using the "Font Manager" program on my Linux
desktop or the "Font Matrix" program which is better.

In my case, the PragmataPro fonts are divided up into:

 - Family: PragmataPro
   - Style: Regular      PragmataPro
   - Style: Italic       PragmataPro Italic
   - Style: Bold         PragmataPro Bold
   - Style: Bold Italic  PragmagaPro Bold Italic
 - Family: PragmataPro Liga
   - Style: Regular      PragmataPro Liga
   - Style: Italic       PragmataPro Liga Italic
   - Style: Bold         PragmataPro Liga Bold
   - Style: Bold Italic  PragmagaPro Liga Bold Italic
 - Family: PragmataPro Mono
   - Style: Regular      PragmataPro Mono
   - Style: Italic       PragmataPro Mono Italic
   - Style: Bold         PragmataPro Mono Bold
   - Style: Bold Italic  PragmagaPro Mono Bold Italic
 - Family: PragmataPro Mono Liga
   - Style: Regular      PragmataPro Mono Liga
   - Style: Italic       PragmataPro Mono Liga Italic
   - Style: Bold         PragmataPro Mono Liga Bold
   - Style: Bold Italic  PragmagaPro Mono Liga Bold Italic






$ fc-list                  -- to see what fonts you have installed
$ fc-list | grep -i pragmata
$ cd ~/.local/share/fonts/
$ unzip ~/Downloads/PragmataPro0.9-8svlok.zip
$ rm -rf PragmataPro0.829
$ fc-cache -fv             -- caches new ones, removes old ones
$ fc-list | grep -i pragmata

** Enable Emacs to Use It for Normal Text Display
- [[https://www.reddit.com/r/emacs/comments/4sm6fa/how_to_enable_pragmatapro_ligatures/][How to enable PragmataPro ligatures : emacs]]
- [[https://www.emacswiki.org/emacs/SetFonts][EmacsWiki: Set Fonts]]

- [[https://github.com/pop-os/pop/issues/111][Trouble Installing Truetype Fonts · Issue #111 · pop-os/pop · GitHub]]

You’ll want to stop calling your font‐picking code unconditionally at
load time, and instead only run it once a graphical frame
exists. Here’s a drop-in replacement for your 12-ui-font-face bits
that:

 1. Wraps any call to xan/choose-frame-font in a check for a GUI frame
 2. Hooks it to both Emacs startup and any new frames (so it works for daemon + emacsclient)
 3. Never runs in -nw or headless daemon-start

Why this code below fixes it
 - display-graphic-p returns non-nil only when that frame is really on X/Wayland/macOS GUI.
 - By using window-setup-hook you wait until Emacs has a GUI connection before trying x-list-fonts.
 - By using after-make-frame-functions you cover frames created by emacsclient -c when running Emacs as a daemon.
 - In -nw (or during early daemon start) neither hook nor body runs, so the x-list-fonts error goes away.

With this in place, you’ll only try to pick and apply a GUI font when
it actually makes sense, and both CLI (-nw) and headless (--daemon)
launches will no longer blow up.


#+BEGIN_SRC emacs-lisp
  (defun xan/choose-frame-font ()
    "Pick the best installed non-bold, non-italic font from a preferred list and log the selection."
    (let ((preferred '("PragmataPro Mono Liga-14"
                       "PragmataPro Mono-14"
                       "PragmataPro-14"
                       "monospace-14"))
          (chosen nil))
      (catch 'found
        (dolist (pattern preferred)
          (let ((fonts (x-list-fonts pattern)))
            (when fonts
              (message "[font] Found matches for '%s':" pattern)
              (dolist (f fonts)
                (message "        %s" f))
              ;; Look for a non-bold, non-italic variant
              (setq chosen
                    (seq-find
                     (lambda (font)
                       (and (not (string-match-p "-italic-" font))
                            (not (string-match-p "-bold-" font))))
                     fonts))
              (when chosen
                (message "[font] Selected: %s" chosen)
                (throw 'found chosen))
              ;; fallback to any match
              (when (car fonts)
                (message "[font] Fallback (no regular match): %s" (car fonts))
                (throw 'found (car fonts)))))))
      (unless chosen
        (message "[font] ⚠ No preferred fonts matched."))))

    (defun xan/set-frame-font-if-graphic (&optional frame)
      "If FRAME is graphical, run `xan/choose-frame-font` and apply it."
      (let ((frame (or frame (selected-frame))))
        (when (display-graphic-p frame)
          (when-let ((font (xan/choose-frame-font)))
            (with-selected-frame frame
              (set-frame-font font nil t)
              (message "[font] Using frame font: %s" font))))))

    ;; 1) On initial Emacs GUI startup
    (add-hook 'window-setup-hook #'xan/set-frame-font-if-graphic)

    ;; 2) On every new frame (covers daemon + emacsclient -c)
    (add-hook 'after-make-frame-functions #'xan/set-frame-font-if-graphic)
#+END_SRC


To display the complete list of fonts known to Emacs, execute the following in the
*Scratch Buffer*.

### #+BEGIN_SRC emacs-lispER
###   (dolist (font (x-list-fonts "*"))
###     (insert (format "%s\n" font)))-GOOG-Noto Sans CJK KR-normal-normal-normal-*-*-*-*-*
### #+END_SRC


** Enable Linux Shell to Use It for Normal Text Display
https://github.com/gabrielelana/awesome-terminal-fonts/blob/master/README.md#how-to-install-linux
https://askubuntu.com/questions/1013201/cant-set-up-awesome-terminal-fonts

https://gist.github.com/DeLaGuardo/fe1f3d9397d6ef7468460d54d5601156
https://bastibe.de/2017-09-19-multi-font-themes.html

** Enable LaTeX to Use It for Formatted Text

** Enable PragmataPro Ligature  https://github.com/lumiknit/emacs-pragmatapro-ligatures
=USE THIS ONE=

both use prettify-symbols-mode


This package:
 - Provides a minor mode: pragmatapro-ligatures-mode.
 - Uses prettify-symbols-mode to define ligatures as replacements for character sequences.
 - Works without relying on Emacs-level font shaping support (i.e., independent of HarfBuzz or font-backend magic).
 - Specifically tailored for PragmataPro font — it maps sequences like ==, !=, etc. to Unicode glyphs that are shaped as ligatures in PragmataPro.

💡 Summary: A clean, Emacs-native way to enable synthetic ligatures via symbol substitution.

if (x != y && a == b) { return x->b; }


https://github.com/lumiknit/emacs-pragmatapro-ligatures

#+BEGIN_SRC emacs-lisp
  (use-package pragmatapro-ligatures
    :straight (:host github
               :repo "lumiknit/emacs-pragmatapro-ligatures"
               :local-repo "pragmatapro-ligatures"
               :files ("*.el"))
    :init
      (load (expand-file-name "pragmatapro-lig.el"
                              (straight--repos-dir "pragmatapro-ligatures"))
            nil 'nomessage
      )
      (add-hook 'prog-mode-hook #'pragmatapro-lig-mode)
      (add-hook 'text-mode-hook #'pragmatapro-lig-mode)
      :no-require t
  )

;  (use-package pragmatapro-ligatures
;    :straight (:host github :repo "lumiknit/emacs-pragmatapro-ligatures")
;    :commands pragmatapro-ligatures-mode
;    :init
;      ;; Enable in all prog-mode buffers, or restrict to others as needed
;      (add-hook 'prog-mode-hook #'pragmatapro-ligatures-mode)
;      (add-hook 'text-mode-hook 'pragmatapro-lig-mode)
;    ;;; (pragmatapro-lig-global-mode)
;  )
;
;  ;;; (add-to-list 'load-path "~/.emacs.d/lisp/emacs-pragmatapro-ligatures/pragmatapro-lig")
;;;;  (add-to-list 'load-path "~/.emacs.d/lisp/emacs-pragmatapro-ligatures/")
;  ;;; (use-package pragmatapro-lig)
;;;;  (require 'pragmatapro-lig)
#+END_SRC

** Enable Automatic Text Replacement with Symbols

I am skipping this one because I only use the PragmataPro Ligature font:
 - _Simulates_ ligatures using prettify-symbols-mode.
 - Works even with fonts that don't support ligatures.
 - Is unnecessary when you’re using a ligature-capable font like PragmataPro Ligature.

#+BEGIN_SRC emacs-lispDISABLED
  (use-package pragmatapro-prettify-symbols
    :straight (:host github
               :repo "fabrizioschiavi/pragmatapro"
               :local-repo "pragmatapro-prettify-symbols"
               :files ("emacs_snippets/*.el"))
    :init
    ;; Load the actual file manually
    (let* ((dir (straight--repos-dir "pragmatapro-prettify-symbols"))
           (file (expand-file-name "emacs_snippets/pragmatapro-prettify-symbols-v0.830.el" dir)))
      (load file nil 'nomessage)
      (when (fboundp 'pragmatapro-prettify-symbols-v0.830)
        (add-hook 'prog-mode-hook #'pragmatapro-prettify-symbols-v0.830)))
    :no-require t)  ;; prevents use-package from trying to `require`
#+END_SRC

* Colors

- M-x list-colors-display RET  :: display an annotated rainbox of colors

To see the set of possible color names for X:
    /usr/lib/X11/rgb.txt

(distinguish btw colors for Emacs in X and colors for Emacs in an xterm)

#+BEGIN_SRC emacs-lisp
;;;NEEDED?  (set-background-color "White")
;;;NEEDED?  (set-foreground-color "Black")  ;; don't these duplicate the below?
;;;NEEDED?  (set-cursor-color     "Red")
;;;NEEDED?  (set-mouse-color      "Black")
;;;NEEDED?  (set-border-color     "Blue")
#+END_SRC

* Faces for Emacs Text            =faces vs colors vs themes=

To see the various faces:
    M-x list-faces-display

??? are the following needed to use faces or themes ???

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode
    t)	; Enable colorized text everywhere.

  (setq font-lock-maximum-decoration
    t)	; Enable colorized text everywhere.
#+END_SRC

** Default Face for Specific Kinds of Text
https://www.gnu.org/software/emacs/manual/html_node/emacs/Standard-Faces.html

- default :: This face is used for ordinary text that doesn’t specify any
  face. Its background color is used as the frame’s background color.

M-x customize-face mode-line RET
#+BEGIN_SRC emacs-lisp :results none
  (custom-set-faces
    '(default
      (
        (t
          (:stipple nil
;;           :background "white"
;;           :foreground "black"
           :inverse-video nil
           :box nil
           :strike-through nil
           :overline nil
           :underline nil
           :slant normal
           :weight normal
           :height 130
           :width normal
           :family "PragmataPro"
          )
        )
      )
    )
  )
#+END_SRC

** org-mode face elements

*** Visual Test of Typefaces in Org-Mode

- *Testing*   boldface
- /Testing/   italics
- ~Testing~   verbatim
- -Testing-
- +Testing+   strikethru
- =Testing=   code
 - Testing :: description list

??? (add-to-list 'custom-theme-load-path "<themefolder>")

#+BEGIN_SRC emacs-lisp
  ; Text surrounded by =TEXT=
  ;;; (set-face-attribute 'org-verbatim nil :foreground "LightGrey" :box "Orange" :inverse-video t)

  ; Text surrounded by ~TEXT~
  (set-face-attribute 'org-code nil :foreground "Purple")

  ; Text representing the definition term in a description list   - TERM  :: DEFINITION
  (set-face-attribute 'org-list-dt nil :foreground "Orange" :box "White" :inverse-video t)

  ;font-lock-builtin-face (dark blue on grey)
  ;font-lock-comment-face (red on grey)
  ;font-lock-constant-face (pink on grey)
  ;font-lock-doc-face (black on green)
  ;font-lock-function-name-face (bright blue on grey)
  ;font-lock-keyword-face (bright cyan on grey)
  ;font-lock-string-face (black on green)
  ;font-lock-type-face (FAINT green on grey)
  ;font-lock-variable-name-face (orange on grey HARD TO READ)
  ;font-lock-warning-face red on grey)

  ;(set-face-foreground 'font-lock-builtin-face "White")
  ;(set-face-foreground 'font-lock-comment-face "White")
  ;(set-face-foreground 'font-lock-function-name-face "White")
  ;(set-face-foreground 'font-lock-string-face "White")
  ;(set-face-foreground 'font-lock-variable-name-face "White")

  ;bold (black on grey)
  ;bold-italic (black on grey)
  ;border (black on black UNREADABLE)
  ;cursor (black on black UNREADABLE)
  ;default (black on grey)
  ;fixed-pitch (black on grey)
  ;fringe (black on grey)
  ;header-line (underlined black on grey)
  ;highlight (black-on-green)
  ;isearch (UNREADABLE cyan-on-purple)
  ;isearch-lazy-highlight-face (black-on-cyan)
  ;italic (black-on-grey)
  ;menu  (grey-on-black)
  ;mode-line  (grey-on-black)
  ;mouse
  ;region
  ;scroll-bar
  ;secondary-selection
  ;show-paren-match-face
  ;tool-bar
  ;tooltip
  ;underline
  ;variable-pitch
#+END_SRC

** Themes

A popular way of customizing Emacs colors is the use the #color-theme#
package, of which a number of those these are aware of Org-mode.

For my Gentoo Linux distribution I run, I had to emerge (install):

   $ emerge app-emacs/color-theme

There is also a newer approach called *custom themes* but custom themes do not
replace color themes, as each approach has its advantages.

#+BEGIN_SRC emacs-lisp
  (use-package grandshell-theme)
  (setq custom-enabled-themes '(grandshell))
  (load-theme 'grandshell t)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC DISABLEDemacs-lisp
;;;  (use-package color-theme)
;;  (setq color-theme-is-global t)
;;  (color-theme-initialize)

;;  (load "org-beautify-theme")
;;  (load "color-theme-github")
;;  (load "color-theme-cobalt")  ;; looks normal
;;  (load "color-theme-sanityinc-solarized")  ;; looks normal
;;  (load "color-theme-sanityinc-tomorrow")  ;; looks normal

;;  (load "grandshell-theme")  ;; on black but not bad

;; cyberpunk          ;; on black but not bad
;; grandshell-theme   ;; on black but not bad
;; deeper-blue        ;; on black but not bad
;; leuven             ;; on white but NICE!
;; manoj-dark         ;; on black but VERY CLEAR

#+END_SRC


* SHOULD DISPLAY of BELL GO IN HERE ???  OR IN 10-ui-frame-appearance.org ???


#+BEGIN_SRC emacs-lisp :exports none
  (provide '12-ui-font-face)
  ;;; 12-ui-font-face.el ends here
#+END_SRC

