#+TITLE: 15-ui-modeline-input
#+DESCRIPTION: ???
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp :exports none
;;; 15-ui-modeline-input.el --- ???Foundational Emacs config -*- lexical-binding: t -*-
#+END_SRC





#+CAPTION: Verify what org-mode I'm running
** Along the Bottom, in the Mode Line
#+BEGIN_SRC emacs-lisp
  (setq-default line-number-mode
    t)	; Enable the display, in the mode line along the bottom, of the current line number.
  (setq-default column-number-mode
    t)	; Enable the display, in the mode line along the bottom , of the current column number.
#+END_SRC

The Emacs modeline is a complex beast.

Define the Elements to Be Part of the Modeline

*** Defining My Own Face and a Property Clause to Conditionally Display It

#+BEGIN_SRC emacs-lispER
  (defface jeff-mode-line-client-face
    `( ;; spec
      (t (:background "red"))
    )
    "Used for displaying the region." ;; doc
  )

  (defface jeff-mode-line-client-face-inactive
    `( ;; spec
      (t (:background "gray"))
    )
    "Used for displaying the region." ;; doc
  )
#+END_SRC

;;  (set-face-attribute 'org-list-dt
;;    nil :foreground "Orange" :box "White" :inverse-video t)

#+BEGIN_SRC emacs-lispER
  (defun jeff-window-active-p ()
    (eq (frame-selected-window) (selected-window))
  )

  (setq jeff2-mode-line-client
    `(""
      (:propertize
        (""
          (:eval
            (if (frame-parameter nil 'client)
              (
                "ü†µx"
                'face (if (jeff-window-active-p)
                  'jeff-mode-line-client-face
                  'jeff-mode-line-client-face-inactive)
              )

              "")
          )
        )
        help-echo ,(purecopy "emacsclient frame"))
     )
  )
#+END_SRC

*** Define My Custom Set of Widgets to Display on the Modeline

#+BEGIN_SRC emacs-lispER

  (setq-default mode-line-format
    (list
      "%e"                         ;; print error msg about full memory
       mode-line-front-space       ;; (:eval (if (display-graphic-p) " " "-"))
       ;; mode-line-mule-info

       jeff2-mode-line-client
       mode-line-modified
       mode-line-remote                ;; indicate a remote buffer
;;;üîí üîì
       ;; mode-line-frame-identification  ;; (:eval (mode-line-frame-control))
       mode-line-buffer-identification
       " "
       mode-line-position              ;; (very long expr)
       ;; (vc-mode vc-mode)
       " "
       mode-line-modes             ;; (very long expr)
       mode-line-misc-info         ;; ((global-mode-string ("" global-mode-string " ")))
       mode-line-end-spaces        ;; (:eval (unless (display-graphic-p) "-%-"))
    )
  )
;;              (list
;;
;;               '(:eval (propertize (if (eq 'emacs evil-state) " Óùπ " " ÓüÖ ")
;;                                   'face (cogent/evil-state-face)))
;;
;;               " "
;;               mode-line-misc-info ; for eyebrowse
;;
;;               '(:eval (when-let (vc vc-mode)
;;                         (list " "
;;                               (propertize (substring vc 5)
;;                                           'face 'font-lock-comment-face)
;;                               " ")))
;;
;;               '(:eval (list
;;                        ;; the buffer name; the file name as a tool tip
;;                        (propertize " %b" 'face 'font-lock-type-face
;;                                    'help-echo (buffer-file-name))
;;                        (when (buffer-modified-p)
;;                          (propertize
;;                           " ÔÖã"
;;                           'face (if (cogent-line-selected-window-active-p)
;;                                     'cogent-line-modified-face
;;                                   'cogent-line-modified-face-inactive)))
;;                        (when buffer-read-only
;;                          (propertize
;;                           "ÔÄ£"
;;                           'face (if (cogent-line-selected-window-active-p)
;;                                     'cogent-line-read-only-face
;;                                   'cogent-line-read-only-face-inactive)))
;;                        " "))
;;
;;               ;; relative position in file
;;               '(:eval (list (nyan-create))) ;; from the nyan-mode package
;;               (propertize "%p" 'face 'font-lock-constant-face)
;;
;;               ;; spaces to align right
;;               '(:eval (propertize
;;                        " " 'display
;;                        `((space :align-to (- (+ right right-fringe right-margin)
;;                                              ,(+ 3 (string-width mode-name)))))))
;;
;;               ;; the current major mode
;;               (propertize " %m " 'face 'font-lock-string-face)))
#+END_SRC

*** Define My Desired Appearance of Selected Modeline Widgets
**** Defining the Appearance of the "Org-Mode Clock"

#+BEGIN_SRC emacs-lisp

  (set-face-attribute 'org-mode-line-clock
    nil :foreground "green2" :weight 'bold)

  (set-face-attribute 'org-mode-line-clock-overrun
    nil :foreground "red2" :background "black" :weight 'bold)

#+END_SRC


** Along the Bottom, inside the Minibuffer
#+BEGIN_SRC emacs-lisp
  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)

  (defun my-minibuffer-setup ()
    (set (make-local-variable 'face-remapping-alist)
        '((default :height 1.8)) ;; use a larger font for my presentations
    )
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-clock-mode-line-total
      'today) ;; show on modeline all time clocked into this task today

  (setq org-clock-clocked-in-display
      'mode-line) ;; show task name and clocked time on modeline but NOT frame title
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'org-element)
  (require 'org-clock)

  (defvar org-clock-running-ol nil
    "Overlay for the running clock.")

  (defface org-clock-running-face
    '((t :foreground "Red" :weight bold))
    "Face for highlighting the running clock.")

  (defun org-clock-add-running-ol ()
    "Highlight the running clock."
    (save-excursion
      (when (org-clock-is-active)
        (org-clock-remove-running-ol)
        (goto-char org-clock-marker)
        (setq org-clock-running-ol (make-overlay (point) (scan-sexps (point) -1)))
        (overlay-put org-clock-running-ol 'face 'org-clock-running-face)
        )))

  (defun org-clock-remove-running-ol ()
    (when (overlayp org-clock-running-ol)
      (delete-overlay org-clock-running-ol)
      (setq org-clock-running-ol nil)))
#+END_SRC


#+BEGIN_SRC emacs-lisp :exports none
  (provide '15-ui-modeline-input)
  ;;; 15-ui-modeline-input.el ends here
#+END_SRC
